include "io.txt";
include "string.txt";

record node<elemType> {
	node<elemType> next_node;
	bool has_next = false;

	elemType element;
}

record list<elemType> {
	node<elemType> head;
	node<elemType> tail;
	int count = 0;
}

global readonly auto push_front = proc<elemType>(list<elemType> list, elemType element) return node<elemType> {
	list.count = list.count + 1;
	if(list.count > 1) {
		list.tail.has_next = true;
		return list.tail = list.tail.next_node = new node<elemType> {
			element = element;
		};
	}
	else {
		return list.head = list.tail = new node<elemType> {
			element = element;
		};
	}
};

global readonly auto forall = proc<elemType>(list<elemType> list, proc<nothing, elemType> todo) return nothing {
	node<elemType> current = list.head;
	while(true) {
		todo(current.element);
		if(current.has_next) {
			current = current.next_node;
		}
		else {
			break;
		}
	}
	return;
};

record person {
	array<char> name = "Michael";
	int age = 16;
}

record student extends person {
	name = "Stanley";
	float gpa = 0f;
}

proc<list<person>> getPeople = proc() return list<person> {
	list<person> list = new list<person>;
	push_front<person>(list, new person);
	push_front<person>(list, new person {
		name = "Tim";
		age = 17; 
	});
	push_front<person>(list, new person {
		name = "Dick";
		age = 53; 
	});
	push_front<person>(list, new student);
	return list;
};

list<person> list = getPeople();

forall<person>(list, proc(person p) return nothing {
	print(p.name);
	print("\tAge: ");
	println(itos(p.age));
	return;
});

forall<person>(list, proc(person p) return nothing {
	p.name = "Untitled";
	return;
});

forall<person>(list, proc(person p) return nothing {
	print(p.name);
	print("\tAge: ");
	println(itos(p.age));
	return;
});

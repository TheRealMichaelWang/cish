include "io.txt";
include "string.txt";
include "list.txt";

record string_map_pair<elemType> {
  array<char> string;
  elemType element;
}

record string_map<elemType> {
  list<string_map_pair<elemType>> mylist = new list<string_map_pair<elemType>>; 
}

global readonly auto string_map_push_back = proc<elemType>(string_map<elemType> map, array<char> str, elemType elem) return nothing {
  push_front<string_map_pair<elemType>>(map.mylist, new string_map_pair<elemType> {
    string = str;
    element = elem;
  });
  return;
};

global readonly auto string_map_find = proc<elemType>(string_map<elemType> map, array<char> str) return elemType {
  node<string_map_pair<elemType>> current = map.mylist.head;
  while(true){
    if(strcmp(current.element.string, str)){
      return current.element.element;
    }
    else {
      current = current.next_node;
    }
  }
};

string_map<int> myMap = new string_map<int>;
string_map_push_back<int>(myMap, "Michael", 4);
string_map_push_back<int>(myMap, "Steve", 3);

forall<string_map_pair<int>>(myMap.mylist, proc(string_map_pair<int> pair) return nothing{
  println(pair.string);
  println(itos(pair.element));
  return;
});